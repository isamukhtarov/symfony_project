<?php
declare(strict_types=1);

namespace Ria\Bundle\PhotoBundle\Form\Type;

use Doctrine\ORM\EntityManagerInterface;
use Ria\Bundle\PhotoBundle\Entity\Photo;
use Ria\Bundle\PhotoBundle\Query\Repository\PhotoRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\DataTransformerInterface;
use Symfony\Component\Form\FormBuilderInterface;
use Ria\Bundle\PhotoBundle\Command\PhotoCommand;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\{CollectionType, TextType};

class PhotoManagerMultipleType extends AbstractType implements DataTransformerInterface
{
    public function __construct(
        private EntityManagerInterface $entityManager,
        private PhotoRepository $photoRepository,
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('main', TextType::class)
            ->add('photos', CollectionType::class, ['allow_add' => true])
            ->addModelTransformer($this);
    }

    public function buildView(FormView $view, FormInterface $form, array $options)
    {
        /** @var PhotoCommand $value */
        $value = &$view->vars['value'];

        if ($value->photos && !$value->photos[0] instanceof Photo) {
            $value = $this->transform($value);
        }

        parent::buildView($view, $form, $options); // TODO: Change the autogenerated stub
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'data_class' => PhotoCommand::class
        ]);
    }

    public function transform($value): PhotoCommand
    {
        if ($value->main) {
            $value->main = $this->photoRepository->find($value->main);
        }

        $photos = [];
        foreach ($value->photos as $photo) {
            $photos[] = $this->photoRepository->find($photo);
        }

        $value->photos = $photos;
        return $value;
    }

    public function reverseTransform($value)
    {
        $value->photos = array_filter($value->photos);
        return $value;
    }
}